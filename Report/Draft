
Part j
The Integrated Algorithm guarantees that no state is expanded more than twice by maintaining two closed lists, an anchor list and a non-anchor list. A node is only expanded by a search if it is not a member of that closed list. If the anchor heuristic expands the node first, the node is never re-expanded because the algorithm checks if the node exists in the anchor closed list before checking the non-anchor list. The base condition to expand a node is that the g is lowered. Then if the node does not exist in the anchor’s closed list, it can be expanded by the anchor regardless if the node was already expanded in non-anchor list. Implementation of these properties can be found in the expandState method.

Part h
Similar to Phase 1, the closed lists in Phase 2 are implemented using a HashSet.  The open lists were implemented using HashMaps with the nodes as keys and the algorithm-generated keys as values. At first, priority queues were used. When using priority queues, it updated the key value updates it across all the queues. It didn’t change the positions in the queues but it created future issues with the comparator when the next value is inserted. Instead of cloning a new node for every queue, we switched the open lists to HashMaps. HashMaps provide an insert/update average time of O(1). Unlike priority queues, the nodes do not need to be removed and re-inserted to update. The Top and MinKey methods have a time complexity of O(n). For space efficiency, the Sequential Algorithm only initializes arrays (within the node object) that are needed to store the values for each heuristic for nodes that are expanded.
