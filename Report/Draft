4
The heuristics mentioned in the following sections are based off these general formulas.

In 4.1
Pro: considers diagonal movement
Con: computationally expensive, only considers a straight line movement
Using the diagonal cost, this function fails to take into account the faster
speeds of the highways. We consider this to be the worst heuristic as it will be likely be inadmissible in most cases involving a highway. Using an average of the highway horizontal/ vertical
costs and unblocked cell diagonal s cost, the heuristic tries to consider the
fact that an L-shaped movement on a highway is less costly than moving on a
diagonal. Still, the heuristic is not inadmissible. An admissible heuristic would be if D2 was the lowest diagonal value which occurs when two highways run parallel. However, considering there are only 4 highways, this heuristic would be greatly underestimate the optimal cost.

In 4.2
Pro: computationally inexpensive
Con: does not consider diagonal movement
This formula considers the faster movements of highways. If the optimal
path does not make use of the highways, this heuristic is not close to the actual
cost. This heuristic is admissible in most cases, see below for exceptions.

4.3 (probably can remove Chebyshev and Diagonal since are more like honorable mentions)
Computes the number of steps if a diagonal is not taken and adds the
minimum diagonal steps. The cost of the minimum diagonal steps is the net cost of not moving vertical/ horizontal.
The equation tries to take into account both directions of travel. Considering all directions, highways for vertical/horizontal and regular cells for diagonal (extremely low probability for diagonal highway movement), might provide a good estimate that is admissible in most cases. However, using all the costs for a highway, this is the best optimal heuristic. It largely underestimates most paths but holds up for rare cases such where an optimal path is diagonal movements through parallel highways.

Best Heuristic:
h = .25 * (dx + dy) + (Math.sqrt(2) * .25 -  2 * .25) * Math.min(dx,dy); 

5

Heuristic 6
h = .25 * (dx + dy) + (Math.sqrt(2) * .25 -  2 * .25) * Math.min(dx,dy); 


A*

Total average run time: 12.22ms
Total average path length: 180
Total average nodes expanded: 7899
Total average memory used: 3035.316875KB
Weighted A* (1.25)

Total average run time: 10.4ms
Total average path length: 175
Total average nodes expanded: 6556
Total average memory used: 1912.20203125KB
Weighted A* (2.00)
Total average run time: 4.56ms
Total average path length: 159
Total average nodes expanded: 3693
Total average memory used: 1062.43KB


6 

Heuristic 5 is the least conservative heuristic function in regards to cost. 

In contrast, Heuristic 6 is an admissible/consistent function and a drastically worst performance. 

From these results, we can conclude that the more weight/value that originates from the heuristic leads to a better computational performance. The higher the heuristic values, the more influence it has in directing the algorithm.

Heuristic 6 provides a fairly low estimate of the true optimal cost. The Weighted A* at 1.25 increased the computational performance without sacrificing the optimal cost nearly all of the trials. The Weighted A* at 2.00 more accuracy is lost. 

Heuristic 5 provided the best computational performance but grossly overestimates the optimal cost. 

Heuristic 3 provides lower overestimates compared to Heuristic 5. As a result, the optimal path deviated a lot less than Heuristic 5 despite having the same Euclidean Distance Formula basis. 

The simulations demonstrate a tradeoff between computational performance and optimality. 
